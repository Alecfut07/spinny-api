#!/usr/bin/env node
const dotenv = require('dotenv').config(); // eslint-disable-line no-unused-vars
const http = require('http');
const debug = require('debug')('spinny:server');
const app = require('../app');
const config = require('../config');

function normalizePort(val) {
    const base = 10;
    const number = parseInt(val, base);

    if (Number.isNaN(number)) {
        // named pipe
        return val;
    }

    if (number >= 0) {
        // port number
        return number;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            debug(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            debug(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
}

const port = normalizePort(process.env.PORT || config.PORT);
app.set('port', port);

const env = process.env.NODE_ENV || 'development';
debug(`Running on ${env}`);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
